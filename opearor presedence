#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <stdbool.h>
#include <math.h>

char input[100];
int position = 0;

void error() {
    fprintf(stderr, "Error at position %d\n", position);
    exit(EXIT_FAILURE);
}

void match(char expected) {
    if (input[position] != expected) {
        error();
    }
    position++;
}

double parseExpression();
double parseTerm();
double parseFactor();

double parseExpression() {
    double result = parseTerm();
    while (input[position] == '+' || input[position] == '-') {
        char op = input[position++];
        double term = parseTerm();
        result = (op == '+') ? result + term : result - term;
    }
    return result;
}

double parseTerm() {
    double result = parseFactor();
    while (input[position] == '*' || input[position] == '/') {
        char op = input[position++];
        double factor = parseFactor();
        result = (op == '*') ? result * factor : result / factor;
    }
    return result;
}

double parseFactor() {
    if (isdigit(input[position])) {
        double result;
        sscanf(input + position, "%lf", &result);
        while (isdigit(input[position]) || input[position] == '.') {
            position++;
        }
        return result;
    } else if (input[position] == '(') {
        position++;
        double result = parseExpression();
        match(')');
        return result;
    } else if (input[position] == '^') {
        position++;
        double exponent = parseFactor();
        return pow(parseFactor(), exponent);
    } else {
        error();
    }
    return 0.0; // To avoid compiler warning
}

int main() {
    printf("Enter an arithmetic expression: ");
    fgets(input, sizeof(input), stdin);

    double result = parseExpression();

    if (input[position] == '\0' || input[position] == '\n') {
        printf("Result: %.2lf\n", result);
    } else {
        printf("\nParsing failed. Extra characters in input.\n");
    }

    return 0;
}
